#!/bin/bash
# pp-extract-split-applet 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of vcf_bcf_file: '$vcf_bcf_file'"
    echo "Value of vars_vcf_bcf_file: '$vars_vcf_bcf_file'"
    echo "Value of maf_threshold: '$maf_threshold'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    MAF_ARG=""
    if [ ! -z "${maf_threshold}" ]
    then
        echo "Will use MAF threshold : ${maf_threshold}"

        MAF_ARG="--pp-from-maf --maf-threshold ${maf_threshold}"
    fi

    FILENAME="$(dx describe "$vcf_bcf_file" --name)"
    echo "Filename : ${FILENAME}"
    VARS_FILENAME="$(dx describe "$vars_vcf_bcf_file" --name)"
    echo "Vars Filename : ${VARS_FILENAME}"

    dx download "$vcf_bcf_file" -o "${FILENAME}"
    dx download "$vars_vcf_bcf_file" -o "${VARS_FILENAME}"

    HETS_FILENAME="${FILENAME}_hets.bin"

    # Extract the low PPs
    pp_extract -f "${FILENAME}" -o "${HETS_FILENAME}" ${MAF_ARG} --extract-pp1-singletons -v --main-var-vcf "${VARS_FILENAME}"

    hets_file=$(dx upload "${HETS_FILENAME}" --brief)

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output bin_hets "${hets_file}" --class=file
}
