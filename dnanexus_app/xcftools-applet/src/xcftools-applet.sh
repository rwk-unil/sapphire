#!/bin/bash
# xcftools-applet 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of arguments: '$arguments'"
    echo "Value of localodir: '$localodir'"

    #Â dxfuse
    # Create a manifest file for dxfuse
    echo "{
    \"files\" : [],
    \"directories\" : [
        {
        \"proj_id\" : \"$DX_PROJECT_CONTEXT_ID\",
        \"folder\" : \"/\",
        \"dirname\" : \"/project\"
        }
    ]
    }" > .dxfuse_manifest.json
    echo "DX_PROJECT_CONTEXT_ID : ${DX_PROJECT_CONTEXT_ID}"

    # Create a mount point for the project
    MOUNTDIR=/mnt
    sudo mkdir -p $MOUNTDIR

    # Mount the current project
    dxfuse $MOUNTDIR .dxfuse_manifest.json &

    # Wait for mount to start
    sleep 2

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    mkdir -p "${localodir}"
    xcftools $arguments
    output=(./"${localodir}"/*)

    for i in "${!output[@]}"; do
        file=$(dx upload "${output[$i]}" --brief)
        dx-jobutil-add-output output "${file}" --class=array:file
    done
}
