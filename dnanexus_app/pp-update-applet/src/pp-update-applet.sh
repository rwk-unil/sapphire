#!/bin/bash
# pp-update-applet 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of original_vcf_file: '$original_vcf_file'"
    echo "Value of rephased_binary_file: '$rephased_binary_file'"
    echo "Value of verbose: '$verbose'"
    echo "Value of nopp: '$nopp'"
    echo "Value of output_vcf_filename: '$output_vcf_filename'"
    echo "Value of main_variant_vcf_file: '$main_variant_vcf_file'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    MAIN_VAR_ARG=""
    if [ ! -z "${main_variant_vcf_file}" ]
    then
        echo "Will use the main variant file ${main_variant_vcf_file}"

        dx download "$main_variant_vcf_file" -o var_file.bcf
        MAIN_VAR_ARG="--main-var-vcf var_file.bcf"
    fi

    VCF_FILENAME="$(dx describe "$original_vcf_file" --name)"
    dx download "$original_vcf_file" -o "${VCF_FILENAME}"

    dx download "$rephased_binary_file" -o rephased_binary_file

    if [ "$verbose" = true ]
    then
        VERBOSE="-v"
    else
        unset VERBOSE
    fi

    NEW_VCF_FILE="$(basename ${VCF_FILENAME})_rephased.bcf"
    if [ -z "${output_vcf_filename}" ]
    then
        output_vcf_filename="${NEW_VCF_FILE}"
    fi

    # TODO Check if output file name is same as input file name

    echo "Running PP-Update ... this can take a while ..."
    if [ "$nopp" = true ]
    then
       time pp_update -f "${VCF_FILENAME}" -o "${output_vcf_filename}" -b rephased_binary_file ${VERBOSE} ${MAIN_VAR_ARG} --no-pp
    else
       time pp_update -f "${VCF_FILENAME}" -o "${output_vcf_filename}" -b rephased_binary_file ${VERBOSE} ${MAIN_VAR_ARG}
    fi
    echo "Indexing output file ..."
    bcftools index "${output_vcf_filename}"

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    rephased_vcf_file=$(dx upload "${output_vcf_filename}" --brief)
    rephased_vcf_file_index=$(dx upload "${output_vcf_filename}".* --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output rephased_vcf_file "$rephased_vcf_file" --class=file
    dx-jobutil-add-output rephased_vcf_file_index "$rephased_vcf_file_index" --class=file
}
