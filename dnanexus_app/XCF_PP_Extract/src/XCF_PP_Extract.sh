#!/bin/bash
# XCF_PP_Extract 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of xcf_bcf: '$xcf_bcf'"
    echo "Value of xcf_bcf_idx: '$xcf_bcf_idx'"
    echo "Value of xcf_bin: '$xcf_bin'"
    echo "Value of xcf_fam: '$xcf_fam'"
    echo "Value of pp_threshold: '$pp_threshold'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    XCF_BCF_FILENAME="$(dx describe "$xcf_bcf" --name)"
    dx download "$xcf_bcf" -o "${XCF_BCF_FILENAME}"
    XCF_BCF_IDX_FILENAME="$(dx describe "$xcf_bcf_idx" --name)"
    dx download "$xcf_bcf_idx" -o "${XCF_BCF_IDX_FILENAME}"
    XCF_BIN_FILENAME="$(dx describe "$xcf_bin" --name)"
    dx download "$xcf_bin" -o "${XCF_BIN_FILENAME}"
    XCF_FAM_FILENAME="$(dx describe "$xcf_fam" --name)"
    dx download "$xcf_fam" -o "${XCF_FAM_FILENAME}"

    echo "Downloaded:"
    echo "${XCF_BCF_FILENAME}"
    echo "${XCF_BCF_IDX_FILENAME}"
    echo "${XCF_BIN_FILENAME}"
    echo "${XCF_FAM_FILENAME}"

    threads=$(nproc)
    overlap=2000
    directory="split"
    start_position=0
    position=0
    end_position=$(bcftools view --threads ${threads} -H -G ${XCF_BCF_FILENAME} | tail -n 1 | cut -f 2) || \
        { echo failed to get end position; exit 1; }
    chromosome=$(bcftools index -s ${XCF_BCF_FILENAME} | tail -n 1 | cut -f 1) || \
        { echo failed to get chromosome; exit 1; }
    vcf_basename=$(basename "${XCF_BCF_FILENAME}")

    echo "Chromosome: ${chromosome}, end position: ${end_position}"

    if [ -z "$OFNAME" ]
    then
        OFNAME="${vcf_basename}_sapphire.bin"
    fi

    if ((overlap >= 10000))
    then
        echo "Overlap too big (should be <10000)"
        exit 1
    fi

    mkdir -p "${directory}" || \
        { echo "failed to create directory : ${directory}"; exit 1; }

    start=$(date)
    echo Starting processing : ${start}

    if (( end_position < (10000 * threads) || threads == 1 ))
    then
        # Don't bother with multi-threading
        echo "single thread"
        #xcftools view -i "${XCF_BCF_FILENAME}" -m "${maf}" -o "${directory}/${OFNAME}" --log "${directory}/${OFNAME}.log" -Obs
        xcftools view -i "${XCF_BCF_FILENAME}" -o "${directory}/${OFNAME}" --log "${directory}/${OFNAME}.log" -Obs
    else
        echo "Running with ${threads} threads"
        fail=0
        increment=$(((end_position+overlap)/threads))
        #echo $threads
        #echo $increment
        #echo $end_position

        echo "Adding line numbers to XCF BCF file : $(date)"
        # Add line numbers
        bcf_add_line -f "${XCF_BCF_FILENAME}" -o "${XCF_BCF_FILENAME}.line"
        # Replace original file
        mv "${XCF_BCF_FILENAME}.line" "${XCF_BCF_FILENAME}"
        echo "Indexing XCF BCF file : $(date)"
        # Index file
        bcftools index -f --threads ${threads} "${XCF_BCF_FILENAME}"

        for (( i=0 ; position < end_position; position+=increment, i++))
        do
            echo "${chromosome}:$((position))-$((position+increment+overlap))"
            #xcftools view --line-from-vcf -r "${chromosome}:$((position))-$((position+increment+overlap))" -i "${XCF_BCF_FILENAME}" -m "${maf}" -o "${directory}/${OFNAME}_$i" --log "${directory}/${OFNAME}_$i.log" -Obs > /dev/null 2>&1 &
            xcftools view --line-from-vcf -r "${chromosome}:$((position))-$((position+increment+overlap))" -i "${XCF_BCF_FILENAME}" -o "${directory}/${OFNAME}_$i" --log "${directory}/${OFNAME}_$i.log" -Obs > /dev/null 2>&1 &
            pids[$i]=$!
        done

        for pid in ${pids[*]}
        do
            wait $pid || let "fail+=1"
        done

        if (( fail > 0 ))
        then
            echo ${fail} jobs failed
        else
            vertical_bin_merger -b "${directory}/${OFNAME}" -o "${directory}/${OFNAME}"
        fi
    fi

    stop=$(date)
    echo Done processing : ${stop}

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    mv ${directory}/${OFNAME} ${OFNAME}
    sapphire_bin=$(dx upload ${OFNAME} --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output sapphire_bin ${sapphire_bin} --class=file
}
