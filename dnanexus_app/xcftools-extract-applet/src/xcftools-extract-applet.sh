#!/bin/bash
# xcftools-extract-applet 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of xcf_bcf_file: '$xcf_bcf_file'"
    echo "Value of xcf_bcf_idx_file: '$xcf_bcf_idx_file'"
    echo "Value of xcf_bin_file: '$xcf_bin_file'"
    echo "Value of xcf_fam_file: '$xcf_fam_file'"
    echo "Value of threads: '$threads'"
    echo "Value of maf: '$maf'"
    echo "Value of use_pp: '$use_pp'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    VCF_FILENAME="$(dx describe "$xcf_bcf_file" --name)"
    echo "XCF VCF Filename : ${VCF_FILENAME}"
    dx download "$xcf_bcf_file" -o "${VCF_FILENAME}"

    IDX_FILENAME="$(dx describe "$xcf_bcf_idx_file" --name)"
    echo "XCF VCF IDX Filename : ${IDX_FILENAME}"
    dx download "$xcf_bcf_idx_file" -o "${IDX_FILENAME}"

    BIN_FILENAME="$(dx describe "$xcf_bin_file" --name)"
    echo "XCF BIN Filename : ${BIN_FILENAME}"
    dx download "$xcf_bin_file" -o "${BIN_FILENAME}"

    FAM_FILENAME="$(dx describe "$xcf_fam_file" --name)"
    echo "XCF FAM Filename : ${FAM_FILENAME}"
    dx download "$xcf_fam_file" -o "${FAM_FILENAME}"

    if ((threads > 1))
    then
        date
        echo "Annotating VCF file with LINE INFO field"
        bcf_add_line -f "${VCF_FILENAME}" -o "${VCF_FILENAME}_line"
        mv "${VCF_FILENAME}_line" "${VCF_FILENAME}"
        bcftools index -f "${VCF_FILENAME}"
        date
        echo "Annotation done"
    fi

    vertical_xcf2sapphire.sh --vcf-filename "${VCF_FILENAME}" --threads "${threads}" -m "${maf}" -o "${VCF_FILENAME}.bin"

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    cat *.log > "${VCF_FILENAME}.bin.log"

    sapphire_binary_file=$(dx upload "${VCF_FILENAME}.bin" --brief)
    logs=$(dx upload "${VCF_FILENAME}.bin.log" --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output sapphire_binary_file "$sapphire_binary_file" --class=file
    dx-jobutil-add-output logs "$logs" --class=file
}
